<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <!-- If this file changes force a rebuild -->
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
    <!-- To avoid circular imports, importers can use Condition="'$(MainBuildImported)' != 'true'" -->
    <MainBuildImported>true</MainBuildImported>
  </PropertyGroup>

  <UsingTask TaskName="GetCommandLineProperties" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
      <ParameterGroup>
          <Properties ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
      </ParameterGroup>
      <Task>

          <Code Type="Fragment" Language="cs">
              <![CDATA[
  this.Properties = Environment
    .GetCommandLineArgs()
    .Where(s => s.StartsWith("/p:", StringComparison.InvariantCultureIgnoreCase))
    .Select(s => s.Remove(0, 3))
    .Select(s => new TaskItem(s))
    .ToArray();
  ]]>
          </Code>
      </Task>
  </UsingTask>

  <!-- This replicates the MSBuild command line except it overrides the
       CustomBeforeMicrosoftCommonTargets variable to point at .\Before.Microsoft.Commmon.targets
       and CustomAfterMicrosoftCommonTargets variable to point at .\After.Microsoft.Commmon.targets.
       This means that whether the user executes through the command line build or via BuildHook.targets
       from inside Visual Studio, all projects will use .\Before.Microsoft.Commmon.targets and
       .\After.Microsoft.Commmon.targets. -->
  <Target Name="PrepareBuildProperties">
    <!-- Pass along all original command line arguments to child MSBuild calls -->
    <GetCommandLineProperties>
      <Output ItemName="CommandLineProperties" TaskParameter="Properties"/>
    </GetCommandLineProperties>

    <PropertyGroup>
      <_BuildProperties>CustomBeforeMicrosoftCommonTargets=$(BuildRootPath)Before.Microsoft.Common.targets</_BuildProperties>
      <_BuildProperties>$(_BuildProperties);CustomAfterMicrosoftCommonTargets=$(BuildRootPath)After.Microsoft.Common.targets</_BuildProperties>
      <_BuildProperties Condition="'@(CommandLineProperties)' != ''">$(_BuildProperties);@(CommandLineProperties)</_BuildProperties>
    </PropertyGroup>
  </Target>

  <Target Name="Build" DependsOnTargets="PrepareBuildProperties">
    <MSBuild Projects="@(Projects)" Properties="$(_BuildProperties)" Targets="Build" BuildInParallel="$(BuildInParallel)">
      <Output TaskParameter="TargetOutputs" ItemName="CollectedBuildOutput" />
    </MSBuild>
  </Target>

  <Target Name="Clean" DependsOnTargets="PrepareBuildProperties">
    <MSBuild Projects="@(Projects)" Properties="$(_BuildProperties)" Targets="Clean" BuildInParallel="$(BuildInParallel)">
      <Output TaskParameter="TargetOutputs" ItemName="CollectedBuildOutput" />
    </MSBuild>
  </Target>

  <Target Name="Publish" DependsOnTargets="PrepareBuildProperties">
    <MSBuild Projects="@(Projects)" Properties="$(_BuildProperties)" Targets="Publish" BuildInParallel="$(BuildInParallel)">
      <Output TaskParameter="TargetOutputs" ItemName="CollectedBuildOutput" />
    </MSBuild>
  </Target>

  <Target Name="Rebuild" DependsOnTargets="PrepareBuildProperties">
    <MSBuild Projects="@(Projects)" Properties="$(_BuildProperties)" Targets="Rebuild" BuildInParallel="$(BuildInParallel)">
      <Output TaskParameter="TargetOutputs" ItemName="CollectedBuildOutput" />
    </MSBuild>
  </Target>
</Project>
