<?xml version="1.0"?>
<package>
    <metadata>
        <id>Spritely.Build.NoInstall</id>
        <version>$version$</version>
        <title>Spritely.Build.NoInstall</title>
        <authors>Spritely</authors>
        <owners>Spritely</owners>
        <language>en-US</language>
        <licenseUrl>https://github.com/spritely/Build/blob/master/LICENSE</licenseUrl>
        <projectUrl>https://github.com/spritely/Build</projectUrl>
        <requireLicenseAcceptance>false</requireLicenseAcceptance>
        <summary>Simple .NET build system that you can install via NuGet.</summary>
        <description>A build system that you can install via NuGet. It sets up hooks into the standard MSBuild files to provide a consisent command line and Visual Studio experience. It doesn't try to solve all your build problems. It just standardizes the code and provides a very simple extensibilty system. Name your file *.ProjectExtension.targets and install as a NuGet package and it will automatically be injected into all project files and run consistently on the command line and in Visual Studio. This version of the package is identical to Spritely.Build except that it excludes its init.ps1 file so this version is an external package instead of a project package (only because init.ps1 must live in the .\tools folder in order to run automatically and this causes the package to become a project package). This is useful if you have your own build package that depends on this package because NuGet will throw exceptions if an external package depends on a project level package (http://nuget.codeplex.com/workitem/595). If that doesn't make sense then just use Spritely.Build unless you hit an issue customizing your build and need this package instead.</description>
        <copyright>Copyright (C) 2015</copyright>
        <tags>Spritely Build .NET</tags>
    </metadata>
    <files>
        <file src="*.proj" />
        <file src="*.targets" />
    </files>
</package>
